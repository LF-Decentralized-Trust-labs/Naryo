name: Naryo CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch base branch for comparison
        run: git fetch origin ${{ github.base_ref }}

      - name: Get changed files and detect modules
        id: set-modules
        run: |
          echo "Fetching base branch..."

          BASE_BRANCH="${{ github.base_ref }}"
          if [ -z "$BASE_BRANCH" ]; then
            echo "No base_ref detected (probably a push to main), using HEAD~1 as base"
            git fetch origin main --depth=1
            BASE=$(git merge-base origin/main HEAD)
            FILES=$(git diff --name-only "$BASE"..HEAD || echo "")
          else
            git fetch origin "$BASE_BRANCH"
            FILES=$(git diff --name-only origin/"$BASE_BRANCH"..HEAD || echo "")
          fi

          echo "Changed files:"
          echo "$FILES"

          echo "Extracting modules from settings.gradle"
          ALL_MODULES=$(grep "^include" settings.gradle | \
            sed -E "s/include\s+//" | \
            tr -d "'\"" | \
            tr ',' '\n' | \
            xargs -n1 echo | \
            sort | uniq)
          echo "All modules:"
          echo "$ALL_MODULES"

          CHANGED_MODULES=""
          for MODULE in $ALL_MODULES; do
            for FILE in $FILES; do
              if [[ "$FILE" == "$MODULE/"* ]]; then
                CHANGED_MODULES="$CHANGED_MODULES $MODULE"
                break
              fi
            done
          done

          CHANGED_MODULES=$(echo "$CHANGED_MODULES" | tr ' ' '\n' | grep -v '^$' | sort -u)
          JSON_ARRAY=$(printf '%s\n' $CHANGED_MODULES | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "Detected modules: $CHANGED_MODULES"
          echo "modules=$JSON_ARRAY" >> $GITHUB_OUTPUT

  build-and-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pre-requisites
        uses: ./.github/actions/setup

      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Run Spotless check
        run: ./gradlew spotlessCheck

      - name: Compile (assemble)
        run: ./gradlew assemble --parallel --scan

  test-modules:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-check]
    if: needs.detect-changes.outputs.modules != '[]' && needs.detect-changes.outputs.modules != ''
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pre-requisites
        uses: ./.github/actions/setup

      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Run tests for changed module
        if: contains(needs.detect-changes.outputs.modules, matrix.module)
        run: ./gradlew ${{ matrix.module }}:test --scan

      - name: Upload JaCoCo HTML report
        if: contains(needs.detect-changes.outputs.modules, matrix.module)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.module }}-jacoco-html
          path: ${{ matrix.module }}/build/reports/jacoco-html/

#  integration-tests-on-main:
#    runs-on: ubuntu-latest
#    needs: build-and-check
#    if: github.ref == 'refs/heads/main'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Install pre-requisites
#        uses: ./.github/actions/setup
#
#      - name: Restore Gradle cache
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle
#
#      - name: Run integration tests
#        run: ./gradlew integration-tests:test --scan
#
#      - name: Upload integration test report
#        uses: actions/upload-artifact@v4
#        with:
#          name: integration-jacoco-html
#          path: integration-tests/build/reports/jacoco-html/

  publish-packages:
    runs-on: ubuntu-latest
    needs: [ test-modules ]
    if: github.ref == 'refs/heads/main' && success()
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pre-requisites
        uses: ./.github/actions/setup

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Build and publish packages
        run: ./gradlew publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
