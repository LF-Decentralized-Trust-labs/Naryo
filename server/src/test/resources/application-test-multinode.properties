kafka.bootstrap.addresses = ${spring.embedded.kafka.brokers}
eventStore.type = DB

ethereum.nodes[1].name = another
ethereum.nodes[1].url = http://localhost:8545
ethereum.nodes[1].blockStrategy=POLL

ethereum.nodes[0].pollingInterval = 500

# LOGGING
logging.level.org.apache.kafka.clients.NetworkClient=error
spring.devtools.restart.log-condition-evaluation-delta=false

spring.mongodb.embedded.version=3.5.5

management.endpoint.metrics.enabled=false

ethereum.nodes[0].name=default
ethereum.nodes[0].url=http://localhost:8545
ethereum.nodes[0].blockStrategy=POLL
ethereum.nodes[0].syncingThreshold=100
ethereum.nodes[0].healthcheckInterval=5000
ethereum.nodes[0].maxBlocksToSync=0
ethereum.healthcheck.pollInterval=5000
ethereum.blockStrategy=POLL
ethereum.numBlocksToReplay=12
ethereum.sync.batchSize=100000

eventStore.url=http://localhost:8081/api/rest/v1
eventStore.eventPath=/event
eventStore.latestBlockPath=/latestblock

database.type=MONGO

broadcaster.type=KAFKA
broadcaster.cache.expirationMillis=6000000
broadcaster.event.confirmation.numBlocksToWait=12
broadcaster.event.confirmation.numBlocksToWaitForMissingTx=100
broadcaster.event.confirmation.numBlocksToWaitBeforeInvalidating=2
broadcaster.multiInstance=false
broadcaster.enableBlockNotifications=true

kafka.topic.contractEvents=contract-events
kafka.topic.blockEvents=block-events
kafka.topic.eventeumEvents=eventeum-events
kafka.topic.transactionEvents=transaction-events
kafka.topic.messageEvents=messageEvents-events
kafka.topic.partitions=1
kafka.topic.replicationSets=1
